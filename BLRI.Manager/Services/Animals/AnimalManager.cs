using System;
using System.Collections.Generic;
using System.Linq;
using AutoMapper;
using BLRI.Common.Enum;
using BLRI.Common.Helper;
using BLRI.DAL.Interfaces.Core;
using BLRI.Entity.Animals;
using BLRI.Manager.Interfaces.Animals;
using BLRI.Manager.Map;
using BLRI.Manager.Services.Core;
using BLRI.ViewModel.Animals;
using BLRI.ViewModel.LookUp;

namespace BLRI.Manager.Services.Animals
{
    public class AnimalManager: BaseService, IAnimalManager
    {
        public AnimalManager(IUnitOfWork unitOfWork) : base(unitOfWork)
        {
        }

        public IEnumerable<AnimalViewModel> GetAll()
        {
            var animals = UnitOfWork.AnimalRepository.GetAll();

            return Mapper.Map<IEnumerable<AnimalViewModel>>(animals);
        }

        public AnimalViewModel Get(object id)
        {
            var animal = UnitOfWork.AnimalRepository.Find(id);

            var result = Mapper.Map<AnimalViewModel>(animal);

            return result;
        }

        public ReasonCode Delete(object id)
        {
            var animal = UnitOfWork.AnimalRepository.Find(id);
            if (animal == null)
                return ReasonCode.NotFound;

            UnitOfWork.AnimalRepository.Remove(animal);

            return UnitOfWork.Complete() > 0 ? ReasonCode.Deleted : ReasonCode.OperationFailed;
        }

        public ReasonCode Add(AnimalViewModel animalViewModel)
        {
            var animalObj = Mapper.Map<Animal>(animalViewModel);
            animalObj.SetLastUpdateDate();
            animalObj.SetCreateDate();
            animalObj.Year = animalViewModel.BirthDate.Year;
            animalObj.UpdatedByUserId = animalViewModel.UpdatedByUserId;
            animalObj.SetCreateUserId();
            UnitOfWork.AnimalRepository.Add(animalObj);

            return UnitOfWork.Complete() > 0 ? ReasonCode.Created : ReasonCode.OperationFailed;
        }

        public ReasonCode Update(AnimalViewModel viewModel)
        {
            var animal = UnitOfWork.AnimalRepository.Find(viewModel.Id);
            if (animal == null)
            {
                return ReasonCode.NotFound;
            }
            animal.UpdateAnimal(viewModel);
            animal.UpdatedByUserId = viewModel.UpdatedByUserId;
            animal.SetCreateUserId();
            animal.SetLastUpdateDate();
            UnitOfWork.AnimalRepository.Update(animal);

            return UnitOfWork.Complete() > 0 ? ReasonCode.Updated : ReasonCode.OperationFailed;
        }

        public IEnumerable<DropdownViewModel<Guid>> GetAnimalsDropdown(int categoryId)
        {
            return UnitOfWork.AnimalRepository.GetAnimalsByCategoryId(categoryId);
        }

        public List<AnimalListViewModel> GetAnimalListBy()
        {
            var aList = UnitOfWork.AnimalRepository.GetAnimalListBy().Select(x =>
            {
                x.BirthSession = x.BirthDate.GetBirthSession();
                x.GenderName = x.Gender.ToString();
                return x;
            });

            return aList.ToList();
        }

        public AnimalListViewModel GetAllInfoById(Guid id)
        {
            var animalInfo = UnitOfWork.AnimalRepository.GetAnimalInfoById(id);
            if(animalInfo != null) { 
                animalInfo.GenderName = animalInfo.Gender.ToString();
                animalInfo.BirthSession = animalInfo.BirthDate.GetBirthSession();
            }
            return animalInfo;
        }

        public IEnumerable<DropdownViewModel<Guid>> GetDamSireDropdownByCategory(int categoryId, int genderId)
        {
            var animals = UnitOfWork.AnimalRepository.GetDamSireByCategoryId(categoryId, genderId);
            return animals;
        }

        public string GetAutogeneratedAnimalId(string prefix)
        {
            return UnitOfWork.AnimalRepository.GenerateAnimalId(prefix);
        }
    }
}
